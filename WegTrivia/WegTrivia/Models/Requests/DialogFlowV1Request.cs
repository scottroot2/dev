// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using WegTrivia.Models.Requests;
//
//    var dialogFlowV1Request = DialogFlowV1Request.FromJson(jsonString);

namespace WegTrivia.Models.Requests.v1
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class DialogFlowV1Request
    {
        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("timestamp")]
        public DateTimeOffset Timestamp { get; set; }

        [JsonProperty("lang")]
        public string Lang { get; set; }

        [JsonProperty("result")]
        public Result Result { get; set; }

        [JsonProperty("status")]
        public Status Status { get; set; }

        [JsonProperty("sessionId")]
        public string SessionId { get; set; }
    }

    public partial class Result
    {
        [JsonProperty("source")]
        public string Source { get; set; }

        [JsonProperty("resolvedQuery")]
        public string ResolvedQuery { get; set; }

        [JsonProperty("speech")]
        public string Speech { get; set; }

        [JsonProperty("action")]
        public string Action { get; set; }

        [JsonProperty("actionIncomplete")]
        public bool ActionIncomplete { get; set; }

        [JsonProperty("parameters")]
        public Parameters Parameters { get; set; }

        [JsonProperty("contexts")]
        public List<object> Contexts { get; set; }

        [JsonProperty("metadata")]
        public Metadata Metadata { get; set; }

        [JsonProperty("fulfillment")]
        public Fulfillment Fulfillment { get; set; }

        [JsonProperty("score")]
        public long Score { get; set; }
    }

    public partial class Fulfillment
    {
        [JsonProperty("speech")]
        public string Speech { get; set; }

        [JsonProperty("messages")]
        public List<Message> Messages { get; set; }
    }

    public partial class Message
    {
        [JsonProperty("type")]
        public long Type { get; set; }

        [JsonProperty("speech")]
        public string Speech { get; set; }
    }

    public partial class Metadata
    {
        [JsonProperty("intentId")]
        public string IntentId { get; set; }

        [JsonProperty("webhookUsed")]
        [JsonConverter(typeof(ParseStringConverter))]
        public bool WebhookUsed { get; set; }

        [JsonProperty("webhookForSlotFillingUsed")]
        [JsonConverter(typeof(ParseStringConverter))]
        public bool WebhookForSlotFillingUsed { get; set; }

        [JsonProperty("isFallbackIntent")]
        [JsonConverter(typeof(ParseStringConverter))]
        public bool IsFallbackIntent { get; set; }

        [JsonProperty("intentName")]
        public string IntentName { get; set; }
    }

    public partial class Parameters
    {
        [JsonProperty("ProductCategory")]
        public List<string> ProductCategory { get; set; }
    }

    public partial class Status
    {
        [JsonProperty("code")]
        public long Code { get; set; }

        [JsonProperty("errorType")]
        public string ErrorType { get; set; }
    }

    public partial class DialogFlowV1Request
    {
        public static DialogFlowV1Request FromJson(string json) => JsonConvert.DeserializeObject<DialogFlowV1Request>(json, WegTrivia.Models.Requests.v1.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this DialogFlowV1Request self) => JsonConvert.SerializeObject(self, WegTrivia.Models.Requests.v1.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(bool) || t == typeof(bool?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            bool b;
            if (Boolean.TryParse(value, out b))
            {
                return b;
            }
            throw new Exception("Cannot unmarshal type bool");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (bool)untypedValue;
            var boolString = value ? "true" : "false";
            serializer.Serialize(writer, boolString);
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }
}
